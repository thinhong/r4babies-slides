---
title: "Chuẩn bị"
execute:
  echo: true
subtitle: "R for babies"
footer: "[Website](https://drthinhong.com/r4babies/prepare.html)"
---

## Mục tiêu

1.  Biết cách tìm path tới nơi lưu file data
2.  Biết cách tạo và quản lý R project
3.  Biết cách đọc data vào R

## File data đang ở đâu?

Bước đầu tiên chúng ta phải biết file data đang nằm ở đâu trong máy tính. Vị trí, hay địa chỉ, hay đường dẫn lưu file data trong máy tính gọi là ***path***.

## Windows

Để Windows hiển thị đường dẫn trong Explorer, trên thanh menu chọn dấu `...` \> `Options`.

![](img/prepare/path-win-option.png)

## Windows

Chọn tab `View`, tick vào ô `Display the full path in the title bar`.

![](img/prepare/path-win-full.png){width="60%"}

## Windows

Sau khi làm các bước trên, click vào title bar của Explorer sẽ thấy hiển thị đầy đủ path của file hoặc folder hiện tại như sau:

![](img/prepare/path-win-1.png)

![](img/prepare/path-win-2.png)

## Windows

![](img/prepare/path-win-2.png)

::: callout-important
# Lưu ý

Trong Windows, khi copy path vào R cần sửa lại theo 1 trong 2 cách sau:

1.  Sửa tất cả dấu `\` thành `/`:

```         
C:/Users/ongph/github/r4babies/data
```

2.  Sửa tất cả dấu `\` thành `\\`:

```         
C:\\Users\\ongph\\github\\r4babies\\data
```
:::

## MacOS

Để hiển thị đường dẫn trong `Finder`, trên thanh menu chọn `View` \> `Show Path Bar`

![](img/prepare/path-mac-option.png){fig-alt="path-mac" width="354"}

## MacOS

Tại thanh đường dẫn (Path Bar), nhấn chuột phải vào folder hoặc file, sau đó chọn `Copy "tên_folder" as Pathname` để copy đường dẫn đến folder.

Trong ví dụ sau, đường dẫn được copy là `/Users/anhptq/Desktop/r4babies/data`

![](img/prepare/path-mac-1.png){width="671"}

## Absolute path

Trong ví dụ trên, `C:/Users/ongph/github/r4babies/data` là đường dẫn tuyệt đối (***absolute path***). Absolute path là path đầy đủ từ đầu ổ đĩa cho đến file hay folder hiện tại.

## Relative path

Trong folder `C:/Users/ongph/github/r4babies` có chứa 2 folders là `/data` và `/analysis`. Chúng ta có thể minh họa path này như sau:

```         
C:
|-- Users
    |-- ongph
        |-- github
            |-- r4adults
                |-- data
            |-- r4babies
                |-- data
                |-- analysis
```

## Relative path

```         
C:
|-- Users
    |-- ongph
        |-- github
            |-- r4adults
                |-- data
            |-- r4babies
                |-- data
                |-- analysis
```

Ví dụ chúng ta đang ở trong folder `/data` nằm trong `/r4babies`. Từ `/data` muốn hướng dẫn cho máy tính đi đến được folder `/analysis` có thể viết ***relative path*** như sau:

```         
../analysis
```

## Relative path

```         
C:
|-- Users
    |-- ongph
        |-- github
            |-- r4adults
                |-- data
            |-- r4babies
                |-- data
                |-- analysis
```

```         
../analysis
```

Trong đó:

-   `..`: đi ngược lên 1 folder, trong ví dụ này chúng ta đang ở `/data`, đi ngược lên 1 folder là `/r4babies`
-   `/analysis`: sau khi đi ngược lên `/r4babies`, hướng dẫn máy tính đi tiếp tới folder `/analysis`

## Relative path

```         
C:
|-- Users
    |-- ongph
        |-- github
            |-- r4adults
                |-- data
            |-- r4babies
                |-- data
                |-- analysis
```

Tương tự, chúng ta đang ở trong folder `/data` nằm trong `/r4babies`, muốn đến folder `/data` nằm trong `/r4adults` thì viết như sau:

```         
../../r4adults/data
```

## Quy tắc đặt tên files, folders

Để tránh bị lỗi trong quá trình sử dụng R, nên đặt tên files, folders theo các quy tắc sau:

-   Không đặt tên có dấu tiếng Việt
-   Không đặt tên quá dài
-   Không đặt tên có các kí tự đặc biệt như `/`, `\`, `&`, `,`, `(`, `)`..., tốt nhất chỉ nên đặt chữ và số

## Quy tắc đặt tên files, folders

Để tránh bị lỗi trong quá trình sử dụng R, nên đặt tên files, folders theo các quy tắc sau:

-   Không đặt tên chữ viết hoa viết thường lẫn lộn, nếu cần thì chỉ đặt theo quy luật camelCase (viết hoa chữ cái đầu của các từ sau từ đầu tiên, ví dụ `dataSoiHcm`) hoặc PascalCase (viết hoa chữ cái đầu của tất cả các từ, ví dụ `DataSoiHcm`)

## Quy tắc đặt tên files, folders

Để tránh bị lỗi trong quá trình sử dụng R, nên đặt tên files, folders theo các quy tắc sau:

-   Không có khoảng trống `" "` trong tên, có thể đặt kiểu camelCase, hoặc sử dụng dấu `-`, `_` thay thế các khoảng trống: ví dụ không dùng tên `data soi HCM 2023.xlsx` mà có thể đặt là `dataSoiHcm2023.xlsx`, hoặc `data-soi-hcm-2023.xlsx`, hoặc `data_soi_hcm_2023.xlsx`

## R project

Để tiện quản lý, mỗi dự án phân tích nên được đặt trong 1 folder. Trong folder này chứa tất cả data, code, bảng kết quả, biểu đồ... Chúng ta sẽ dùng chức năng tạo R project của RStudio để tạo folder này.

## R project

Trên thanh menu vào `File` \> `New Project...` \> `New Directory`.

![](img/prepare/new-prj-1.png)

## R project

Chọn Project Type là `New Project`.

![](img/prepare/new-prj-2.png)

## R project

Đặt tên folder cho project này, và chọn đường dẫn nơi sẽ lưu project trong máy tính.

![](img/prepare/new-prj-3.png)

## R project

Trong folder `/test` là một R project mới tạo này, chúng ta tạo thêm 2 folders `/data` và `/analysis`. Các thành phần trong folder này như sau:

```         
test
|-- data
    |-- data.csv
|-- analysis
    |-- code.R
    |-- analysis.Rmd
|-- test.Rproj
```

-   Folder `/data`: chứa tất cả data.
-   Folder `/analysis`: chứa tất cả file R Markdown.

## R project

Từ bây giờ, mỗi lần muốn phân tích cho dự án `/test` này, chúng ta mở file `test.Rproj` bằng RStudio. Tất cả các file code trong folder `/analysis` có thể đọc file trong folder `/data` bằng cách dùng relative path. Những data quan trọng không thể copy vào chung trong project thì dùng absolute path. Ví dụ:

```{r, eval = F}
df <- read.csv("../data/data.csv")
```

## Phân biệt hai loại file chính

Chúng ta có thể gặp các files data ở rất nhiều format khác nhau, như `.csv`, `.txt`, `.json`, `.xlsx`, `.dta`... Tuy nhiên, một cách đơn giản, có thể chia các files thành 2 loại:

-   Text files
-   Binary files

## Text files

Là những files khi mở bằng text editor như Notepad thì có thể đọc được các chữ trong file (human-readable). Các files như `.csv`, `.txt`, `.json` đều là text files. Trong R đã có sẵn những functions để đọc được hầu hết các text files.

## Text files

::: {#fig-text-files layout-ncol="2"}
![](img/prepare/csv.png)

![](img/prepare/json.png)

File `.csv` và `.json` khi mở bằng Notepad
:::

## Binary files

Là những files khi mở bằng text editor như Notepad thì không đọc được các chữ trong file. Các files như `.xlsx`, `.dta` đều là binary files. Binary files cần được mở bằng các phần mềm chuyên dụng, ví dụ dùng Excel để mở file `.xlsx` thì mới đọc được dưới dạng chữ human-readable. Bản thân R không đọc được các loại file này, nhưng chúng ta có thể cài đặt và sử dụng các R packages để đọc binary files.

## Binary files

::: {#fig-binary-files layout-ncol="2"}
![](img/prepare/excel.png)

![](img/prepare/dta.png)

File `.xlsx` và `.dta` khi mở bằng Notepad
:::

## `read.table()`

Lệnh `read.table()` là lệnh chung để đọc tất cả data dạng bảng.

```{r, eval = F}
read.table(file, header = FALSE, sep = "")
```

Dùng `?read.table` để đọc thêm hướng dẫn sử dụng và các arguments khác của lệnh.

## `read.table()`

```{r, eval = F}
read.table(file, header = FALSE, sep = "")
```

-   `file`: path của file data đầu vào, có thể dùng absolute path hoặc relative path.

-   `header`: dòng đầu tiên của file data có phải là tên cột không. Nếu `header = TRUE` thì R sẽ lấy các giá trị trong hàng đầu tiên làm tên cột. Nếu `header = FALSE` thì R sẽ tự đặt tên cột là `V1`, `V2`, `V3`...

::: callout-important
# Lưu ý

Trong R, `TRUE` có thể viết tắt là `T` và `FALSE` có thể viết tắt là `F`.
:::

## `read.table()`

```{r, eval = F}
read.table(file, header = FALSE, sep = "")
```

-   `sep`: các cột trong text file ngăn cách nhau bằng kí tự gì. Ví dụ file `life-exp.csv` nếu chúng ta mở bằng Notepad sẽ thấy các cột ngăn cách nhau bằng dấu `,`.

![](img/prepare/csv.png)

## `read.table()`

Chúng ta đọc file `life-exp.csv` vào R như sau:

```{r}
df <- read.table(file = "data/life-exp.csv", header = F, sep = ",")
head(df)
```

## `read.table()`

Nếu đọc với argument `header = T`:

```{r}
df <- read.table(file = "data/life-exp.csv", header = T, sep = ",")
head(df)
```

## `read.table()`

```{r, eval=FALSE}
df <- read.table(file = "data/life-exp.csv", header = T, sep = ",")
head(df)
```

::: callout-note
Dấu `<-` dùng để gán kết quả của một function cho một đối tượng (object) trong R. Nếu chỉ viết `read.table(file = "data/life-exp.csv", header = T, sep = ",")` thì R không lưu lại kết quả sau khi đọc mà chỉ hiển thị ra màn hình.

Sau khi gán kết quả đọc của `read.table()` vào object `df`, dùng lệnh `head(df)` để hiển thị 6 dòng đầu tiên của bảng.
:::

## `read.csv()`

File `.csv` là một định dạng thông dụng, tên đầy đủ là comma-separated values nghĩa là các giá trị được ngăn cách bởi dấu `,` (comma). Trong R có sẵn lệnh `read.csv()` để đọc file `.csv`.

```{r, eval = F}
read.csv(file, header = TRUE, sep = ",")
```

Các arguments của `read.csv()` cũng tương tự `read.table()`, nhưng đã được quy định cho phù hợp với file `.csv`. Vì vậy, thường chỉ cần đặt path vào argument `file` là đủ.

## `read.csv()`

```{r}
df <- read.csv(file = "data/life-exp.csv")
head(df)
```

## `read_excel()`

Dùng lệnh `read_excel()` trong package `readxl` để đọc các file excel (đuôi `.xls` hay `.xlsx`).

```{r, eval = F}
read_excel(path, sheet = NULL, col_names = TRUE)
```

Chúng ta có thể thấy tên các arguments của `read_excel()` hoàn toàn khác với `read.table()` hay `read.csv()`.

## `read_excel()`

```{r, eval = F}
read_excel(path, sheet = NULL, col_names = TRUE)
```

-   `path`: path của file data đầu vào.
-   `sheet`: tên hoặc số thứ tự của sheet sẽ đọc vào R, nếu file có nhiều sheets.
-   `col_names`: dòng đầu tiên của file data có phải là tên cột không, giống argument `header` của `read.table()`.

## `read_excel()`

```{r}
library(readxl)
df <- read_excel(path = "data/gdp-capita.xlsx", sheet = 1)
head(df)
```

::: callout-important
# Lưu ý

Một lỗi thường gặp với file excel là R đọc các file có merged cells không tốt. Vì vậy khi nhập data, nên tránh làm merged cells.
:::

## File SPSS, Stata, SAS

Dùng các lệnh `read_sav()` (SPSS), `read_dta()` (Stata) và `read_sas()` (SAS) trong package `haven`.

```{r}
library(haven)
df <- read_dta(file = "data/linelist-raw.dta")
head(df)
```

## Mục tiêu

1.  Biết cách tìm path tới nơi lưu file data
2.  Biết cách tạo và quản lý R project
3.  Biết cách đọc data vào R
