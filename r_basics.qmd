---
title: "Làm sạch (p1)"
execute:
  echo: true
subtitle: "R for babies"
footer: "[Website](https://drthinhong.com/r4babies/r_basics.html)"
---

## Mục tiêu

1.  Hiểu các thuật ngữ trong R
2.  Hiểu các datatype trong R
3.  Học các thao tác cơ bản khi làm việc với data.frame
4.  Học về các package hỗ trợ khi làm việc với các datatype phức tạp hơn (string, Date)

# Các khái niệm trong R

## Đối tượng trong R

Mọi thứ được lưu trữ trong R - bao gồm bộ dữ liệu, biến số, danh sách tên cột, kết quả đầu ra như biểu đồ - đều là **các đối tượng**, được **gán tên** và **có thể được tham chiếu** trong các lệnh sau đó.

Để tạo đối tượng trong R, ta dùng cú pháp sau

```{r, eval=FALSE}
tên_đối_tượng <- giá_trị_của_đối_tượng 

```

**VD**: Đọc file `vaccine_data.xlsx` để sử dụng trong bài học

```{r warning=FALSE}
library(readxl)
# tạo đối tượng file_path để lưu trữ đường dẫn đến file excel
data_path <- "data/vaccine_data.xlsx"

# tạo đối tượng df lưu trữ bảng dữ liệu đọc từ file excel
df <- read_excel(path = data_path)
```

## Đối tượng trong R

Sau khi tạo các đối tượng, ta có thể thử xem giá trị được lưu trữ

```{r}
data_path
# sử dụng lệnh head để xem 6 hàng đầu thay vì toàn bộ bảng
head(df) 
```

## Đối tượng trong R

::: callout-important
### Lưu ý

Giá trị của một đối tượng **có thể bị ghi đè** bất kỳ lúc nào bằng cách chạy lệnh gán để định nghĩa lại giá trị của nó. Do đó, **thứ tự của các lệnh được chạy rất quan trọng**.

VD: lệnh sau sẽ ghi đè giá trị của đối tượng `data_path`

```{r}
data_path <- "data/new_path.xlsx"
# kiểm tra giá trị 
data_path
```
:::

## Câu văn trong R

Câu lệnh (command) hoặc hàm (function) chính là những câu văn trong R để giao tiếp với máy tính. Một câu lệnh trong R thường có dạng như sau:

```{r, eval = F}
tên-câu-lệnh(tên-tham-số = data-đầu-vào hoặc lựa-chọn)
```

-   Tên câu lệnh: nằm trước dấu `()`, thể hiện ý nghĩa câu lệnh dùng để làm gì.
-   Tên tham số (argument): những điều chỉnh cụ thể để máy tính hiểu rõ hơn yêu cầu của người dùng.
-   Dấu `=`: dùng để gán 1 giá trị cho tham số.

::: notes
Chúng ta phải học ngữ pháp của 1 câu lệnh và ý nghĩa của nó để có thể sử dụng R để ra lệnh cho máy tính.

-   Tên câu lệnh: nằm trước dấu (), thể hiện ý nghĩa câu lệnh dùng để làm gì.
-   Tên tham số (argument): nằm trong dấu () là những tham số của câu lệnh đó. Tham số là những yêu cầu nhỏ và cụ thể để máy tính hiểu rõ hơn yêu cầu của người dùng.
-   Dấu =: dùng để gán 1 giá trị cho tham số.
:::

## Câu văn trong R

Ví dụ:

```{r}
max(x = df$id, na.rm = TRUE)
```

::: incremental
-   Tên câu lệnh là `max`: tìm giá trị lớn nhất của 1 biến.
-   Các tham số là `x` và `na.rm`:
    -   `x`: là data đầu vào, `x = df$id` quy định `x` là cột `id` của bảng data `df`.
    -   `na.rm`: lựa chọn cách giải quyết missing value (NA), `na.rm = TRUE` nghĩa là bỏ giá trị `NA` đi trước khi tìm giá trị lớn nhất.
:::

## Câu văn trong R

::: callout-tip
Để đọc hướng dẫn sử dụng về câu lệnh, gõ `?tên-câu-lệnh`.

```{r}
?max
```

Output sẽ hiện trong RStudio như sau

![](img/clean_p1/helper_result.png){width="319"}
:::

## Loại dữ liệu (datatype) trong R

::: r-fit-text
Trong R, mỗi đối tượng được quy định phải theo 1 loại dữ liệu (datatype) nhất định

+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| Datatype     | Ý nghĩa                                                                                            | Ví dụ                         |
+==============+====================================================================================================+===============================+
| `numeric`    | dữ liệu dạng số                                                                                    | -1, -2, 0, 1.5, ...           |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `logical`    | dữ liệu dạng đúng/sai                                                                              | \[TRUE, FALSE\] hoặc \[1, 0\] |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `character`  | dữ liệu dạng ký tự (hay còn gọi là string), được đặt trong dấu ngoặc kép `""`.\                    |                               |
|              | đối tượng dạng ký tự thì **không thể tính toán**                                                   |                               |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `Date`       | dữ liệu ngày tháng                                                                                 | 2024-04-01, 2024-04-02, ...   |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `factor`     | dữ liệu dạng phân loại (categorical)                                                               | giới tính: nam, nữ\           |
|              |                                                                                                    | tỉnh thành\                   |
|              |                                                                                                    | dân tộc                       |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `data.frame` | dữ liệu dạng bảng                                                                                  |                               |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
| `tibble`     | dữ liệu dạng bảng tương tự như data.frame, sự khác biệt chính là tibble in đẹp hơn trong R console |                               |
+--------------+----------------------------------------------------------------------------------------------------+-------------------------------+
:::

::: notes
-   character: đối tượng dạng ký tự thì **không thể tính toán**

-   dữ liệu dạng bảng tương tự như data.frame, sự khác biệt chính là tibble in đẹp hơn trong R console

Các datatype thường gặp trong R `numeric`, `logical`, `character`, `Date`, `factor`, `data.frame`/`tibble`
:::

## Loại dữ liệu (datatype) trong R

::: callout-tip
Để kiểm tra datatype của 1 đối tượng, sử dụng lệnh `class(tên_đối_tượng)`

Để kiểm tra datatype của các cột trong data.frame, ta có thể sử dụng lệnh `str` hoặc kiểm tra tại mục `Data` của RStudio

![](img/clean_p1/view_datatype.png){width="333"}
:::

## Loại dữ liệu (datatype) trong R

VD: kiểm tra bằng lệnh `str`

```{r}
# kiểm tra datatype của df
class(df)

# kiểm tra datatype của các cột trong df
str(df)
```

## Chuyển đổi datatype {#update_datatype}

::: r-fit-text
Cú pháp chung cho thay đổi datatype là `as.datatype()`

Ví dụ như:

-   `as.numeric()` chuyển thành định dạng số.

-   `as.character()` chuyển thành định dạng văn bản.

-   `as.factor()` chuyển thành định dạng factor.

-   `as.Date()` chuyển thành định dạng ngày.

Ngoài ra, còn có các lệnh khác để phục vụ cho các mục đích cụ thể hơn, bao gồm:

-   `ifelse()` chuyển thành định dạng logical theo điều kiện nhất định

-   `is.na()` chuyển thành định dạng logical, các dữ liệu trống (`NA`) có giá trị `TRUE` và ngược lại.

-   `dmy()`, `ymd()`, `mdy()`, ... chuyển đổi string theo các format khác nhau thành định dạng ngày
:::

# Các thao tác thông dụng với data.frame {#sec-df-row-col}

## Làm sạch tên cột {#sec-clean-colnames}

::: r-fit-text
Trong R, tên cột là giá trị trên đỉnh của một cột.

Các quy tắc cho tên cột thường bao gồm:

-   Tên ngắn

-   Không có khoảng trắng (thay thế bằng dấu gạch dưới \_ ).

-   Không có ký tự đặc biệt (&, #, \<, \>, ...) hoặc dấu.

-   Không bắt đầu bằng số.

Lệnh `clean_names()` của package `janitor` được sử dụng để tự động hoá quá trình chuẩn hoá tên cột. Ngoài ra, lệnh `rename()` của package `dplyr` được sử dụng để thay đổi tên cột một cách thủ công.
:::

## Làm sạch tên cột

VD:

```{r, warnings = F}
library(tidyverse)
library(janitor)
df %>% colnames()
df %>% clean_names() %>% colnames()

df <- df %>% 
  clean_names() %>% # dùng clean names để tự động làm sạch tên cột
  rename( # dùng rename để chỉnh sửa thêm
    vgb_truoc_24 = vgb_24,
    vgb_sau_24 = vgb_24_2
  ) 
```

::: notes
-   Dấu `<-` được sử dụng ở VD trên để **gán giá trị mới** vào cột Country (tương đương việc UPDATE cột)

-   Nếu không sử dụng `<-` thì R chỉ trả về kết quả của các câu lệnh nhưng bảng df sẽ **không** có thay đổi

Lệnh `colnames` được sử dụng để xem danh sách tên các cột trong bảng

Dấu pipe

`%>%` được dùng để chuyển đối tượng vào 1 function (trong VD đầu, `%>%` chuyển `df` vào function `colnames`)

`%>%` còn thường được dùng để chuyển các kết quả trung gian sang function tiếp theo, từ đó có thể dùng để nối 1 chuỗi các function để thao tác trên 1 đối tượng
:::

## Lấy dữ liệu theo hàng/cột

::: r-fit-text
-   Cú pháp: `tên_bảng_dữ_liệu[hàng, cột]`. Trong đó cột có thể là số thứ tự của cột hoặc tên cột.

-   Để lấy toàn bộ hàng thì để trống cột và ngược lại

-   Để lấy nhiều cột hay hàng thì cho tên cột hay hàng theo dạng list (chuỗi)

::: callout-note
Đối với cột, còn có cách trích xuất thông dụng khác bằng cách sử dụng dấu `$`.

Tuy nhiên, cách này sẽ chỉ trích xuất dữ liệu trong 1 cột.\
**VD**: Lấy dữ liệu trong cột ngày sinh

```{r, eval = FALSE}
df$ngaysinh
```
:::
:::

## Lấy dữ liệu theo hàng/cột {auto-animate="true"}

Ví dụ:

```{r, eval=FALSE}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]
```

## Lấy dữ liệu theo hàng/cột {auto-animate="true"}

Ví dụ:

```{r, eval=FALSE}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]
# lấy dữ liệu tại hàng thứ 5, cột "vgb_truoc_24"
df[5 , "vgb_truoc_24"]
```

## Lấy dữ liệu theo hàng/cột {auto-animate="true"}

Ví dụ:

```{r, eval=FALSE}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]
# lấy dữ liệu tại hàng thứ 5, cột "vgb_truoc_24"
df[5 , "vgb_truoc_24"]
# lấy hàng thứ 5 trong bảng df
df[5, ]
```

## Lấy dữ liệu theo hàng/cột {auto-animate="true"}

Ví dụ:

```{r, eval=FALSE}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]
# lấy dữ liệu tại hàng thứ 5, cột "vgb_truoc_24"
df[5 , "vgb_truoc_24"]
# lấy hàng thứ 5 trong bảng df
df[5, ]
#lấy các cột id, ngaysinh, vgb_truoc_24
df[, c("id", "ngaysinh", "vgb_truoc_24")] 
```

## Lấy dữ liệu theo hàng/cột {auto-animate="true"}

Ví dụ:

```{r, eval=F}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]
# lấy dữ liệu tại hàng thứ 5, cột "vgb_truoc_24"
df[5 , "vgb_truoc_24"]
# lấy hàng thứ 5 trong bảng df
df[5, ]
#lấy các cột id, ngaysinh, vgb_truoc_24
df[, c("id", "ngaysinh", "vgb_truoc_24")] 
#lấy 10 hàng đầu tiên của các cột Country, Year, GDP
#1:10 là cú pháp nhanh để tạo chuỗi từ 1 đến 10
df[1:10, c("id", "ngaysinh", "vgb_truoc_24")] 
```

## Chuyển đổi datatype cho cột {#sec-update-datatype}

Khi đọc dữ liệu vào R, các cột sẽ được tự động chuyển thành datatype hợp lý nhất

Tuy nhiên, có nhiều cột cần người dùng chuyển một cách thủ công

```{r}
str(df)

```

## Chuyển đổi datatype cho cột

Các cột cần chuyển thủ công

-   Các cột ngày tháng (`ngaysinh` và các cột ngày tiêm): R không thể tự động chuyển sang `Date` vì format trong dữ liệu (`dd/MM/YYYY`) không phải format thông dụng

-   Cột `gioitinh` nên được đổi thành `factor` để hỗ trợ trong quá trình phân tích về sau

-   Cột `tinhtrang` nên được đổi thành `logical` để thể hiện đúng ý nghĩa là biến đúng/sai

Để thay đổi datatype của cột, ta có thể áp dụng các [function từ phần trước](#update_datatype).

## Chuyển đổi datatype cho cột {auto-animate="true"}

Ví dụ:

```{r}
date_cols <- c("ngaysinh", "vgb_truoc_24","vgb_sau_24",
               "vgb_1","vgb_2","vgb_3","vgb_4","hg_1","hg_2",
               "hg_3","hg_4","uv_1","uv_2","uv_3","uv_4")

df <- df %>% 
  mutate(
    gioitinh = as.factor(gioitinh),
    tinhtrang = ifelse(tinhtrang == "theo dõi", TRUE, FALSE)
  ) %>% 
  mutate_at(
    # áp dụng lệnh dmy lên tất cả các cột ngày
    date_cols, 
    dmy
  ) %>% 
  rename(
    theodoi = tinhtrang
  )
```

::: notes
`mutate` được sử dụng để chỉnh sửa giá trị của cột hoặc tạo cột mới

`mutate_at` được sử dụng khi cần chỉnh sửa nhiều cột cùng lúc
:::

## Chuyển đổi datatype cho cột {auto-animate="true"}

Ví dụ:

```{r}
str(df)
```

## Lọc dữ liệu

::: r-fit-text
Function `filter()` được sử dụng cho việc lọc dữ liệu theo điều kiện

| Ký tự      | Ý nghĩa               |
|------------|-----------------------|
| `x == y`   | x bằng y              |
| `x != y`   | x không bằng y        |
| `y < x`    | x nhỏ hơn y           |
| `y <= x`   | x nhỏ hơn hoặc bằng y |
| `is.na(x)` | x trống               |
| `A & B`    | A và B                |
| `A | B`    | A hoặc B              |
| `!`        | Không là (NOT)        |
:::

## Lọc dữ liệu {auto-animate="true"}

Ví dụ:

```{r, eval=F}
# Lọc các dữ liệu của quận 2
df %>% filter(huyen == "Quận 2") 
```

## Lọc dữ liệu {auto-animate="true"}

Ví dụ:

```{r, eval=F}
# Lọc các dữ liệu của quận 2
df %>% filter(huyen == "Quận 2") 
# Lọc các trẻ có ngày tiêm vgb_1 trước ngày 20/2/2024 
df %>% filter(vgb_1 < as.Date("2024-02-20")) 
```

## Lọc dữ liệu {auto-animate="true"}

Ví dụ:

```{r, eval=F}
# Lọc các dữ liệu của quận 2
df %>% filter(huyen == "Quận 2") 
# Lọc các trẻ có ngày tiêm vgb_1 trước ngày 20/2/2024 
df %>% filter(vgb_1 < as.Date("2024-02-20")) 
# Lọc các trẻ ở quận 2 hoặc trước ngày 20/02/2024
df %>% filter(huyen == "Quận 2" | vgb_1 < as.Date("2024-02-20")) 
```

## Lọc dữ liệu {auto-animate="true"}

Ví dụ:

```{r, eval=F}
# Lọc các dữ liệu của quận 2
df %>% filter(huyen == "Quận 2")
# Lọc các trẻ có ngày tiêm vgb_1 trước ngày 20/2/2024 
df %>% filter(vgb_1 < as.Date("2024-02-20")) 
# Lọc các trẻ ở quận 2 hoặc trước ngày 20/02/2024
df %>% filter(huyen == "Quận 2" | vgb_1 < as.Date("2024-02-20"))
# Lọc các trẻ ở quận 2 và trước ngày 20/02/2024
df %>% filter(huyen == "Quận 2" & vgb_1 < as.Date("2024-02-20")) 
```

# Package cho các datatype phức tạp

## Dữ liệu string

Gói `stringr` (1 trong các package trong `tidyverse`) thường được sử dụng để xử lý các dữ liệu dạng string.

Ngoài ra, R còn có package `stringi` dành cho các mục đích cụ thể khác (VD như xử lý dấu, cách mã hoá văn bản, ... )

## Các hàm thông dụng cho string

|                      |             |                                     |
|----------------------|-------------|-------------------------------------|
| **Function**         | **Package** | **Công dụng**                       |
| `tolower`            | base        | biến thành chữ thường               |
| `toupper`            | base        | biến thành chữ hoa                  |
| `str_to_title`       | stringr     | in hoa chữ cái đầu tiên của từng từ |
| `stri_trans_general` | stringi     | loại bỏ dấu                         |

## Các hàm thông dụng cho string

VD: xoá dấu trong cột `tinh` `huyen` `xa`

```{r}
library(stringi)
df %>% 
  mutate(
    tinh_mod = stri_trans_general(tinh, "latin-ascii"),
    huyen_mod = stri_trans_general(huyen, "latin-ascii"),
    xa_mod = stri_trans_general(xa, "latin-ascii")
  ) %>% 
  select(id, tinh, tinh_mod, huyen, huyen_mod, xa, xa_mod)
```

## Các hàm hỗ trợ lọc thông dụng của stringr

::: r-fit-text
|                   |                                                                             |
|-------------------|-----------------------------------------------------------------------------|
| **Function**      | **Công dụng**                                                               |
| `str_starts`      | lọc hàng bắt đầu bằng chuỗi ký tự khớp với pattern                          |
| `str_ends`        | lọc hàng kết thúc bằng bằng chuỗi ký tự khớp với pattern                    |
| `str_detect`      | lọc hàng có chứa chuỗi ký tự khớp với pattern                               |
| `str_interp`      | chèn giá trị vào string (string interpolation)                              |
| `str_replace`     | thay thế 1 chuỗi con (substring) đầu tiên khớp với pattern bằng 1 chuỗi mới |
| `str_replace_all` | thay thế tất cả chuỗi con (substring) khớp với pattern bằng 1 chuỗi mới     |

::: center-text
[{{< fa link >}} stringr functions](https://stringr.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role="button"}
:::
:::

## Regex {auto-animate="true"}

Trong R, regex là 1 ngôn ngữ ngắn gọn để mô tả các patterns trong string

Có bốn công cụ cơ bản mà người dùng có thể sử dụng để tạo một biểu thức chính quy cơ bản:

**Nhóm**

**Bộ ký tự**

**Siêu ký tự**

**Bộ định lượng**

## Regex {auto-animate="true"}

**Nhóm**

Chỉ định các chuỗi cần khớp. Thường được viết trong`()` và phân cách bởi dấu `|`

*VD*: `"(Quận|Huyện)"` - quy định cần khớp chữ `"Quận"` hay `"Huyện"`.

**Bộ ký tự**

string được đánh giá khớp tìm thấy bất kỳ ký tự nào trong dấu ngoặc `[ ]` trong chuỗi.

*VD:* để tìm string chứa các nguyên âm, người ta có thể sử dụng bộ ký tự này: `"[aeiou]"`.

## Regex {auto-animate="true" style="width:1200"}

::: r-fit-text
**Bộ ký tự**

string được đánh giá khớp tìm thấy bất kỳ ký tự nào trong dấu ngoặc `[ ]` trong chuỗi.

*VD:* để tìm string chứa các nguyên âm, người ta có thể sử dụng bộ ký tự này: `"[aeiou]"`.

Các bộ ký tự đặc biệt trong R

::: r-hstack
| Bộ ký tự      | Ý nghĩa                                      |
|---------------|----------------------------------------------|
| `"[A-Z]"`     | bất kỳ chữ cái viết hoa đơn lẻ nào           |
| `"[a-z]"`     | bất kỳ chữ cái viết thường đơn lẻ nào        |
| `"[0-9]"`     | bất kỳ số nào                                |
| `"[:alnum:]"` | bất kỳ chữ cái và số nào                     |
| `"[:digit:]"` | bất kỳ chữ số nào                            |
| `"[:alpha:]"` | bất kỳ ký tự nào (viết hoa hoặc viết thường) |
| `"[:upper:]"` | bất kỳ ký tự viết hoa nào                    |
| `"[:lower:]"` | bất kỳ ký tự viết thường nào                 |

::: fragment
**Siêu ký tự** là bản rút ngắn của một số bộ ký tự

| Siêu ký tự | Ý nghĩa                   |
|------------|---------------------------|
| `"\\s"`    | khoảng trắng đơn          |
| `"\\w"`    | tương đương "\[:alnum:\]" |
| `"\\d"`    | tương đương "\[:digit:\]" |
:::
:::
:::

## Regex {auto-animate="true"}

::: {.r-fit-text style="font-size:20px"}
**Bộ định lượng** chỉ định độ dài của pattern

Bộ định lượng là các số được viết trong dấu ngoặc nhọn `{ }` sau pattern mà chúng đang định lượng.

Ngoài ra có 2 ký tự đặc biệt khác cho bộ định lượng, bao gồm:

-   Dấu `*` : khớp khi có 0 hoặc nhiều hơn pattern được định lượng.

-   Dấu `+` : khớp khi có 1 hoặc nhiều hơn pattern được định lượng.

*VD*:

-   `"A{2}"` quy định khớp khi có hai chữ cái A viết hoa.

-   `"[:digit:]{2}"` quy định khớp khi có hai chữ số.

-   `"[:alpha:]+"` quy định khớp khi có ít nhất 1 chữ cái.
:::

## Sử dụng hàm của `stringr` cùng regex {auto-animate="true"}

***VD1***: Tìm các hàng có xã số

-   Chọn câu lệnh: cần tìm xã có [chứa]{.underline} số --\> sử dụng `str_detect`
-   Quy định pattern bằng regex: cần string chứa [số]{.underline}-\> áp dụng **Nhóm**

```{r, eval = F}
library(stringr)
df %>% 
  filter(
    str_detect(xa, "[:digit:]")
  ) 
```

## Sử dụng hàm của `stringr` cùng regex {auto-animate="true"}

***VD1***: Tìm các hàng có xã số

```{r}
library(stringr)
df %>% 
  filter(
    str_detect(xa, "[:digit:]")
  ) %>% select(id, xa)
```

## Sử dụng hàm của `stringr` cùng regex {auto-animate="true"}

***VD 2***: cần tìm các trẻ ở quận Phú Nhuận hoặc Bình Thạnh

Chọn câu lệnh: cần lọc các hàng có `huyen` [chứa dòng chữ]{.underline} "Phú Nhuận" hoặc "Bình Thạnh" --\> dùng lệnh `str_detect`

```{r, eval=FALSE}
df %>% 
  filter(
    str_detect(
      huyen, 
      "(Phú Nhuận|Bình Thạnh)"
    )
  )
```

## Sử dụng hàm của `stringr` cùng regex {auto-animate="true"}

***VD 2***: cần tìm các trẻ ở quận Phú Nhuận hoặc Bình Thạnh

```{r}
df %>% 
  filter(
    str_detect(
      huyen, 
      "(Phú Nhuận|Bình Thạnh)"
    )
  ) %>% select(id, huyen)
```

## Dữ liệu ngày tháng

::: r-fit-text
Đối với dữ liệu dạng ngày tháng, package thông dụng nhất là `lubridate` (cũng là 1 phần của tidyverse).

Các lệnh liên quan đến ngày tháng

| Function            | Công dụng                                           | Package   |
|---------------------|-----------------------------------------------------|-----------|
| `difftime`          | tính khoảng cách giữa hai mốc thời gian             | base      |
| `month`/`year`      | lấy tháng/ năm                                      | lubridate |
| `quarter`           | chuyển ngày sang quý                                | lubridate |
| `today`             | lấy ngày hiện tại                                   | lubridate |
| `dmy`, `ymd`, `mdy` | chuyển string theo nhiều format khác nhau sang ngày | lubridate |

::: center-text
[{{< fa link >}} lubridate functions](https://lubridate.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role="button"}
:::
:::

## Dữ liệu ngày tháng {auto-animate="true"}

::: r-fit-text
VD: tìm các trẻ được tiêm vgb_2 trong 1 tháng kể từ ngày sinh

-   Cần tính khoảng thời gian từ lúc cấp chứng chỉ đến hiện tại -\> dùng lệnh `difftime()` với unit là days (difftime không có unit month) sau đó chia cho 365
-   [hoặc]{.underline} dùng lệnh `month` để lấy tháng của 2 mốc thời gian rồi trừ nhau

```{r}
# --- Cách 1
df %>% 
  filter(
    # gọi difftime để tính khoảng cách thời gian
    difftime(vgb_2, ngaysinh, units = "days")/30 <= 2
  ) %>% select(id, ngaysinh, vgb_2)
```
:::

## Dữ liệu ngày tháng {auto-animate="true"}

::: r-fit-text
VD: tìm các trẻ được tiêm vgb_2 trong 1 tháng kể từ ngày sinh

-   Cần tính khoảng thời gian từ lúc cấp chứng chỉ đến hiện tại -\> dùng lệnh `difftime()` với unit là days (difftime không có unit month) sau đó chia cho 365
-   [hoặc]{.underline} dùng lệnh `month` để lấy tháng của 2 mốc thời gian rồi trừ nhau

```{r, eval=FALSE}
# --- Cách 1
df %>% 
  filter(
    # gọi difftime để tính khoảng cách thời gian
    difftime(vgb_2, ngaysinh, units = "days")/30 <= 2
  )

# --- Cách 2
df %>% 
  filter(
    # Gọi month để lấy tháng sau đó trừ nhau
    month(vgb_2) - month(ngaysinh)  <= 2
  )
```

::: fragment
Trong 2 ví dụ trên, cách 1 sẽ chính xác hơn vì ta tính cả ngày khi sử dụng difftime còn cách 2 chỉ lấy 2 tháng trừ nhau
:::
:::

## Lưu bảng dữ liệu sau khi chỉnh sửa

::: r-fit-text
R cho phép lưu lại dữ liệu với nhiều format khác nhau, bao gồm:

-   RData - định dạng dữ liệu của R để lưu trữ nhiều đối tượng

-   RDS - định dạng dữ liệu của R để lưu trữ 1 đối tượng

-   excel

::: callout-important
### Lưu ý

Tốc độ đọc file RData và RDS của R nhanh hơn rất nhiều so với việc đọc file excel.\
Vì vậy, đối với các dữ liệu có số lượng lớn hoặc cần xử lý thêm trong R, nên lưu trữ dưới dạng RDS/Rdata.
:::
:::

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD**:** lưu dữ liệu

```{r, eval=FALSE}
# định nghĩa đường dẫn đến folder chứa data
data_path <- file.path(getwd(), "data")
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD**:** lưu dữ liệu

```{r, eval=FALSE}
# định nghĩa đường dẫn đến folder chứa data
data_path <- file.path(getwd(), "data")
# lưu dưới dạng Rdata
save(df, file = file.path(data_path, "rda_data.Rda"))
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD**:** lưu dữ liệu

```{r, eval=FALSE}
# định nghĩa đường dẫn đến folder chứa data
data_path <- file.path(getwd(), "data")
# lưu dưới dạng Rdata
save(df, file = file.path(data_path, "rda_data.Rda"))
# lưu dưới dạng RDS
saveRDS(df, file = file.path(data_path, "rds_data.Rds"))
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD**:** lưu dữ liệu

```{r, eval=FALSE}
# định nghĩa đường dẫn đến folder chứa data
data_path <- file.path(getwd(), "data")
# lưu dưới dạng Rdata
save(df, file = file.path(data_path, "rda_data.Rda"))
# lưu dưới dạng RDS
saveRDS(df, file = file.path(data_path, "rds_data.Rds"))
# lưu dưới dạng file excel
write_xlsx(df, path = file.path(data_path, "excel_data.xlsx"))
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD: Đọc dữ liệu được lưu

```{r, eval=FALSE}
# đọc file Rdata
load(file.path(data_path, "rda_data.Rda"))
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD: Đọc dữ liệu được lưu

```{r, eval=FALSE}
# đọc file Rdata
load(file.path(data_path, "rda_data.Rda"))
# đọc file RDS
readRDS(file = file.path(data_path, "rds_data.Rds"))
```

## Lưu bảng dữ liệu sau khi chỉnh sửa {auto-animate="true"}

VD: Đọc dữ liệu được lưu

```{r, eval=FALSE}
# đọc file Rdata
load(file.path(data_path, "rda_data.Rda"))
# đọc file RDS
readRDS(file = file.path(data_path, "rds_data.Rds"))
# đọc file excel
read_excel(df, path = file.path(data_path, "excel_data.xlsx"))
```

## Kết thúc phần 1

![](https://media.tenor.com/0m3HNSw2iLYAAAAi/pp-mini-penguin.gif)
